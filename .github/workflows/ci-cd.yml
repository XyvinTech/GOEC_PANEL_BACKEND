name: Build , Push and Deploy

on:
  push:
    branches:
      - main
  

jobs:
  build:
    runs-on: ubuntu-latest
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}        
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID}}


    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build and push Frontend Docker image
    - name: Build and Push FrontEnd Docker image
      env:  
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: goec-panel-frontend
        IMAGE_TAG: latest
        SERVICE_NAME: frontend

      run: |    
        cd ${{env.SERVICE_NAME}}
        docker build -t ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    # Build and push Backend Docker image
    - name : Build and Push Backend Docker image
      env:  
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: goec-panel-backend
        IMAGE_TAG: latest
        SERVICE_NAME: backend

      run: |    
        cd ${{env.SERVICE_NAME}}
        docker build -t ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}


    - name: Deploy to EC2
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          SSH_KEY: ${{ secrets.OCPP_NEW_PEM }}
          EC2_INSTANCE_IP:  ${{ secrets.EC2_INSTANCE_IP}}
          USERNAME: ec2-user
          IMAGE_TAG: latest
          FRONTEND_PORT: 3000
          BACKEND_PORT: 8000


      uses: appleboy/ssh-action@master
      with:
          host: ${{ env.EC2_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY}}
          script: |

            # Refresh ECR login
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin  ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            


            # Pull and run the Frontend Docker Image
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/goec-panel-frontend:${{ env.IMAGE_TAG }}
            sudo docker stop frontend-container || true
            sudo docker rm frontend-container || true
            sudo docker run -d \
              -p ${{ env.FRONTEND_PORT }}:${{ env.FRONTEND_PORT }}\
              --name frontend-container \
              -e NEXT_PUBLIC_BASE_URL=https://panel.goecworld.com/api/v1 \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/goec-panel-frontend:${{ env.IMAGE_TAG }}

            # Pull and run the Backend Docker Image
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/goec-panel-backend:${{ env.IMAGE_TAG }}
            sudo docker stop backend-container || true
            sudo docker rm backend-container || true
            sudo docker run -d \
              -p ${{ env.BACKEND_PORT }}:${{ env.BACKEND_PORT }}\
              --name backend-container \
              -e ENVIRONMENT=production \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/goec-panel-backend:${{ env.IMAGE_TAG }}
                  
            # Clean up old Docker images
            sudo docker system prune -af
